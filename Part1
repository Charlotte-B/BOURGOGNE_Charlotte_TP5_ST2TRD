Part 1: Questions

1. What is this code about?

This code is a code kata. It is a programming exercise that allows programmers to hone their skills through practice and repetition.
In our case (Gilded Rose), we need to calculate the quality of each product at the end of the day. 
The quality of a product is calculated according to its type and its deadline.
Each type of product follows a specific rule to calculate its quality.
Each product has the value "SellIn" (number of days left before its expiration date) and "Quality" (denotes how valuable the item is).


2. Can you clearly identify the name of all the goods stored in the Guilded Rose?

Products that follow a specific rule are:
- Aged Brie
- Sulfuras
- Backstage passes
- Conjured

The products stored in the tavern:
+5 Dexterity Vest
Elixir of the Mongoose
Sulfuras, Hand of Ragnaros (x2)
Backstage passes to a TAFKAL80ETC concert (x3)
Conjured Mana Cake


3. What happens when the day is over? 

At the end of the day, the Quality and SellIn value of each product are recalculated according to the nature of the product.
SellIn increments by -1 for each product except for Sulfuras which remains zero.
Depending on this SellIn value, the Quality value varies differently for each product.


4. What happens to cheese when the day is over? 

The Quality of the cheese increases with time.
At the end of the day, its SellIn value increases by -1 and its Quality increases by +1.
Even after passing its expiration date, its Quality value increases by +2.
However, its Quality must be between 0 and 50 inclusive.


5. What happens when a concert ticket goes over its expiration day?

When a concert ticket passes its expiration date, its Quality value drops to 0.
The ticket can no longer be used because the concert has already taken place. 
It has no more value and therefore no more Quality.


6. What makes this code hard to read?

It is difficult to read the code because the code doesn't have a good pattern strategy.
It lacks classes to simplify the code.
There are too many IF loops, they should be changed by switches.
The code should be made more readable and understandable with a strategy pattern.


7. Do you think the rules are clear enough so that you could rework the entire solution from scratch?

The rules are clear enough.
