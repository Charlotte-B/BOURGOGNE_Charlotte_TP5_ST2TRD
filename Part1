Part 1: Questions

1. What is this code about?

This code is a code kata. It is a programming exercise that allows programmers to hone their skills through practice and repetition.
In our case (Gilded Rose), we need to calculate the quality of each product at the end of the day. 
The quality of a product is calculated according to its type and its deadline.
Each type of product follows a specific rule to calculate its quality.
Each product has the value "SellIn" (number of days left before its expiration date) and "Quality" (denotes how valuable the item is).


2. Can you clearly identify the name of all the goods stored in the Guilded Rose?

Products that follow a specific rule are:
- Aged Brie
- Sulfuras
- Backstage passes
- Conjured

The products stored in the tavern:
+5 Dexterity Vest
Elixir of the Mongoose
Sulfuras, Hand of Ragnaros (x2)
Backstage passes to a TAFKAL80ETC concert (x3)
Conjured Mana Cake


3. What happens when the day is over? 

At the end of the day, the Quality and SellIn value of each product are recalculated according to the nature of the product.
SellIn increments by -1 for each product except for Sulfuras which remains zero.
Depending on this SellIn value, the Quality value varies differently for each product.


4. What happens to cheese when the day is over? 
[Voir si pareil que concert]
[Si 5 < sellIn <= 10 alors quality = quality*2
Si sellIn <= 5 alors quality = quality*3]

La quality du fromage augmente en fonction du temps
Plus il se rapproche de sa date de péremption plus il prend de la valeur en quality
A la fin de la journée, sa valeur sellIn incrémente de -1 et sa quality augmente.
A par si sa date de péremption est dépassé alors sa quality diminue 2 fois plus vite
Si sellIn < 0 alors quality = quality:2


5. What happens when a concert ticket goes over its expiration day?
Lorsque le concert ticket goes over its expiration day, sa qualité est à 0 
Car le concert a déjà eu lieu et il n'est plus utile. 


6. What makes this code hard to read?


7. Do you think the rules are clear enough so that you could rework the entire solution from scratch?


